This file is part of MXE.
See index.html for further information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Harry Nakos <xnakos@gmail.com>
Date: Tue, 16 Jun 2015 21:55:31 +0300
Subject: [PATCH] Patch wscript to link to FLAC, vorbis, vorbisenc, and ogg
 libraries

... which libsndfile is dependent on, since libsndfile will most probably
have not been built statically linked to those libraries.

diff --git a/example-clients/wscript b/example-clients/wscript
index 1111111..2222222 100644
--- a/example-clients/wscript
+++ b/example-clients/wscript
@@ -41,6 +41,10 @@ def configure(conf):
  
     if conf.is_defined('HAVE_SNDFILE'):
         conf.env['LIB_SNDFILE'] = ['sndfile']
+        conf.env['LIB_FLAC'] = ['FLAC']
+        conf.env['LIB_VORBIS'] = ['vorbis']
+        conf.env['LIB_VORBISENC'] = ['vorbisenc']
+        conf.env['LIB_OGG'] = ['ogg']
 
     conf.check_cfg(package='celt', atleast_version='0.5.0', args='--cflags --libs', mandatory=False)
 
@@ -124,7 +128,7 @@ def build(bld):
         if bld.env['IS_SUN']:
             prog.use += ['RT', 'SNDFILE']
         if bld.env['IS_WINDOWS']:
-            prog.uselib = ['SNDFILE']
+            prog.uselib = ['SNDFILE', 'FLAC', 'VORBIS', 'VORBISENC', 'OGG']
         prog.target = 'jack_rec'
 
     if bld.env['IS_LINUX'] or bld.env['IS_MACOSX']:

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Boris Nagaev <bnagaev@gmail.com>
Date: Mon, 31 Aug 2015 23:39:35 +0200
Subject: [PATCH] disable SIGQUIT and SIGHUP

Windows doesn't have them.

Fixed error:

    ../example-clients/transport.c: In function 'main':
    ../example-clients/transport.c:462:9: error: 'SIGQUIT' undeclared (first use in this function)
      signal(SIGQUIT, signal_handler);
             ^
    ../example-clients/transport.c:462:9: note: each undeclared identifier is reported only once for each function it appears in
    ../example-clients/transport.c:464:9: error: 'SIGHUP' undeclared (first use in this function)
      signal(SIGHUP, signal_handler);
             ^

diff --git a/example-clients/transport.c b/example-clients/transport.c
index 1111111..2222222 100644
--- a/example-clients/transport.c
+++ b/example-clients/transport.c
@@ -459,9 +459,13 @@ int main(int argc, char *argv[])
 		return 1;
 	}
 
+#ifndef _WIN32
 	signal(SIGQUIT, signal_handler);
+#endif
 	signal(SIGTERM, signal_handler);
+#ifndef _WIN32
 	signal(SIGHUP, signal_handler);
+#endif
 	signal(SIGINT, signal_handler);
 
 	jack_on_shutdown(client, jack_shutdown, 0);

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Boris Nagaev <bnagaev@gmail.com>
Date: Tue, 1 Sep 2015 22:59:47 +0200
Subject: [PATCH] link transport.c -lreadline and -ltermcap

Fixed error:

src/jack-3-add-lreadline-to-linkflags-of-transport.patch:

    example-clients/transport.c.28.o:transport.c:(.text+0x2e0): undefined reference to `rl_cleanup_after_signal'
    example-clients/transport.c.28.o:transport.c:(.text+0xa27): undefined reference to `rl_readline_name'
    example-clients/transport.c.28.o:transport.c:(.text+0xa2d): undefined reference to `rl_completion_entry_function'
    example-clients/transport.c.28.o:transport.c:(.text+0xa3e): undefined reference to `readline'
    example-clients/transport.c.28.o:transport.c:(.text+0xa82): undefined reference to `add_history'

diff --git a/example-clients/wscript b/example-clients/wscript
index 1111111..2222222 100644
--- a/example-clients/wscript
+++ b/example-clients/wscript
@@ -49,12 +49,13 @@ def configure(conf):
     conf.check_cfg(package='celt', atleast_version='0.5.0', args='--cflags --libs', mandatory=False)
 
     e = conf.check_cc(lib='readline', define_name="HAVE_READLINE", mandatory=False)
+    e = conf.check_cc(lib='termcap', define_name="HAVE_TERMCAP", mandatory=False)
 
     # define_name="HAVE_READLINE" has no effect, LIB_READLINE is defined if readline is available
     #if conf.is_defined('HAVE_READLINE'):
     #    conf.env['LIB_READLINE'] = ['readline']
 
-    conf.env['BUILD_EXAMPLE_CLIENT_TRANSPORT'] = bool(conf.env['LIB_READLINE'])
+    conf.env['BUILD_EXAMPLE_CLIENT_TRANSPORT'] = bool(conf.env['LIB_READLINE']) and bool(conf.env['LIB_TERMCAP'])
 
     conf.env['BUILD_EXAMPLE_CLIENT_REC'] = conf.is_defined('HAVE_SNDFILE')
 
@@ -112,6 +113,7 @@ def build(bld):
         if bld.env['IS_MACOSX']:
             prog.use += ['READLINE']
         prog.target = 'jack_transport'
+        prog.use += ['READLINE', 'TERMCAP']
 
     if bld.env['BUILD_EXAMPLE_CLIENT_REC']:
         prog = bld(features = 'c cprogram')

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Boris Nagaev <bnagaev@gmail.com>
Date: Tue, 1 Sep 2015 22:23:51 +0200
Subject: [PATCH] install jack libs to lib/jack/ instead of lib/

Some Jack library names collide with other libraries,
namely portaudio.

When Jack is installed first time, it adds libportaudio.dll.a to
usr/i686-w64-mingw32.static/lib/. Portaudio has library
usr/i686-w64-mingw32.static/lib/libportaudio.a. When Jack is compiled
second time, it uses its own libportaudio.dll.a instead of
libportaudio.a from portaudio.

Removing usr/i686-w64-mingw32.static/lib/libportaudio.dll.a fixes build of Jack.

For i686-w64-mingw32.shared, this can't be fixed by just removing
libportaudio.dll.a before building jack, because both portaudio and
jack have file usr/i686-w64-mingw32.shared/lib/libportaudio.dll.a.
Two packages must not have same file.

jack's libraries should be installed to subdir of usr/<target>/lib/.

Jack uses waf build system, which unpacks itself from file "waf".
Installation path for lib*.dll.a (PREFIX + /lib) is hardcoded in waf:

waflib/Tools/ccroot.py:

    self.implib_install_task=self.bld.install_as('${PREFIX}/lib/%s'%implib.name,implib,self.env)

The least ugly way to change subdir I can find is changing
function do_install in InstallContext class. Other approaches
either do not work or require changing contents of waflib
(which is unpacked from "waf" file in run-time).

This patch replaces paths like "lib/libjack.dll.a" with
"lib/jack/libjack.dll.a", but doesn't replace
"/lib/pkgconfig/jack.pc".

diff --git a/jack.pc.in b/jack.pc.in
index 1111111..2222222 100644
--- a/jack.pc.in
+++ b/jack.pc.in
@@ -7,5 +7,5 @@ server_libs=-L@LIBDIR@ -l@SERVERLIB@
 Name: jack
 Description: the Jack Audio Connection Kit: a low-latency synchronous callback-based media server
 Version: @JACK_VERSION@
-Libs: -L@LIBDIR@ -ljack
+Libs: -L@LIBDIR@/jack -ljack
 Cflags: -I@INCLUDEDIR@
diff --git a/wscript b/wscript
index 1111111..2222222 100644
--- a/wscript
+++ b/wscript
@@ -378,8 +378,13 @@ def configure(conf):
             print(Logs.colors.NORMAL, end=' ')
     print()
 
+class MyInstallContext(InstallContext):
+    def do_install(self, src, tgt, *args, **kvargs):
+        tgt = str(tgt).replace('/lib/lib', '/lib/jack/lib')
+        InstallContext.do_install(self, src, tgt, *args, **kvargs)
+
 def init(ctx):
-    for y in (BuildContext, CleanContext, InstallContext, UninstallContext):
+    for y in (BuildContext, CleanContext, MyInstallContext, UninstallContext):
         name = y.__name__.replace('Context','').lower()
         class tmp(y):
             cmd = name + '_' + lib32

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Boris Nagaev <bnagaev@gmail.com>
Date: Sun, 3 Jan 2016 16:56:19 +0100
Subject: [PATCH] update wscript's for waf 1.8.17

  * all waf modules are now submodules of waflib
  * tool_options => load
  * check_tool => load
  * compiler_cc => compiler_c
  * sub_options => recurse
  * sub_config => recurse
  * add_subdirs => recurse

diff --git a/common/wscript b/common/wscript
index 1111111..2222222 100644
--- a/common/wscript
+++ b/common/wscript
@@ -1,7 +1,7 @@
 #! /usr/bin/env python
 # encoding: utf-8
 
-import Build
+from waflib import Build
 import re
 import os
 
diff --git a/dbus/wscript b/dbus/wscript
index 1111111..2222222 100644
--- a/dbus/wscript
+++ b/dbus/wscript
@@ -2,9 +2,9 @@
 # encoding: utf-8
 
 import os.path
-import Options
+from waflib import Options
 import re # subst_func
-import Logs
+from waflib import Logs
 
 def options(opt):
     opt.add_option('--enable-pkg-config-dbus-service-dir', action='store_true', default=False, help='force D-Bus service install dir to be one returned by pkg-config')
diff --git a/man/wscript b/man/wscript
index 1111111..2222222 100644
--- a/man/wscript
+++ b/man/wscript
@@ -1,7 +1,7 @@
 #! /usr/bin/env python
 # encoding: utf-8
 
-import Build
+from waflib import Build
 import re
 import os
 
diff --git a/wscript b/wscript
index 1111111..2222222 100644
--- a/wscript
+++ b/wscript
@@ -3,14 +3,14 @@
 from __future__ import print_function
 
 import os
-import Utils
-import Options
+from waflib import Utils
+from waflib import Options
 import subprocess
 g_maxlen = 40
 import shutil
-import Task
+from waflib import Task
 import re
-import Logs
+from waflib import Logs
 import sys
 
 import waflib.Options
@@ -65,8 +65,8 @@ def create_svnversion_task(bld, header='svnversion.h', define=None):
 
 def options(opt):
     # options provided by the modules
-    opt.tool_options('compiler_cxx')
-    opt.tool_options('compiler_cc')
+    opt.load('compiler_cxx')
+    opt.load('compiler_c')
 
     opt.add_option('--libdir', type='string', help="Library directory [Default: <prefix>/lib]")
     opt.add_option('--libdir32', type='string', help="32bit Library directory [Default: <prefix>/lib32]")
@@ -87,11 +87,11 @@ def options(opt):
     opt.add_option('--autostart', type='string', default="default", help='Autostart method. Possible values: "default", "classic", "dbus", "none"')
     opt.add_option('--portaudio', action='store_true', default=False, help='Enable Portaudio driver')
     opt.add_option('--winmme', action='store_true', default=False, help='Enable WinMME driver')
-    opt.sub_options('dbus')
+    opt.recurse('dbus')
 
 def configure(conf):
     conf.load('compiler_cxx')
-    conf.load('compiler_cc')
+    conf.load('compiler_c')
     if Options.options.dist_target == 'auto':
         platform = sys.platform
         conf.env['IS_MACOSX'] = platform == 'darwin'
@@ -116,34 +116,34 @@ def configure(conf):
         Logs.pprint('CYAN', "Windows detected")
 
     if conf.env['IS_LINUX']:
-        conf.check_tool('compiler_cxx')
-        conf.check_tool('compiler_cc')
+        conf.load('compiler_cxx')
+        conf.load('compiler_c')
 
     if conf.env['IS_MACOSX']:
-        conf.check_tool('compiler_cxx')
-        conf.check_tool('compiler_cc')
+        conf.load('compiler_cxx')
+        conf.load('compiler_c')
 
-    # waf 1.5 : check_tool('compiler_cxx') and check_tool('compiler_cc') do not work correctly, so explicit use of gcc and g++
+    # waf 1.5 : load('compiler_cxx') and load('compiler_c') do not work correctly, so explicit use of gcc and g++
     if conf.env['IS_SUN']:
-        conf.check_tool('g++')
-        conf.check_tool('gcc')
+        conf.load('g++')
+        conf.load('gcc')
 
     #if conf.env['IS_SUN']:
-    #   conf.check_tool('compiler_cxx')
-    #   conf.check_tool('compiler_cc')
+    #   conf.load('compiler_cxx')
+    #   conf.load('compiler_c')
 
     if conf.env['IS_WINDOWS']:
-        conf.check_tool('compiler_cxx')
-        conf.check_tool('compiler_cc')
+        conf.load('compiler_cxx')
+        conf.load('compiler_c')
         conf.env.append_unique('CCDEFINES', '_POSIX')
         conf.env.append_unique('CXXDEFINES', '_POSIX')
 
     conf.env.append_unique('CXXFLAGS', '-Wall')
     conf.env.append_unique('CFLAGS', '-Wall')
 
-    conf.sub_config('common')
+    conf.recurse('common')
     if conf.env['IS_LINUX']:
-        conf.sub_config('linux')
+        conf.recurse('linux')
         if Options.options.alsa and not conf.env['BUILD_DRIVER_ALSA']:
             conf.fatal('ALSA driver was explicitly requested but cannot be built')
         if Options.options.freebob and not conf.env['BUILD_DRIVER_FREEBOB']:
@@ -157,12 +157,12 @@ def configure(conf):
         conf.env['BUILD_DRIVER_FREEBOB'] = Options.options.freebob
         conf.env['BUILD_DRIVER_IIO'] = Options.options.iio
     if conf.env['IS_WINDOWS']:
-        conf.sub_config('windows')
+        conf.recurse('windows')
         if Options.options.portaudio and not conf.env['BUILD_DRIVER_PORTAUDIO']:
             conf.fatal('Portaudio driver was explicitly requested but cannot be built')
         conf.env['BUILD_DRIVER_WINMME'] = Options.options.winmme
     if Options.options.dbus:
-        conf.sub_config('dbus')
+        conf.recurse('dbus')
         if conf.env['BUILD_JACKDBUS'] != True:
             conf.fatal('jackdbus was explicitly requested but cannot be built')
 
@@ -171,7 +171,7 @@ def configure(conf):
     if conf.is_defined('HAVE_SAMPLERATE'):
         conf.env['LIB_SAMPLERATE'] = ['samplerate']
 
-    conf.sub_config('example-clients')
+    conf.recurse('example-clients')
 
     if conf.check_cfg(package='celt', atleast_version='0.11.0', args='--cflags --libs', mandatory=False):
         conf.define('HAVE_CELT', 1)
@@ -404,38 +404,38 @@ def build(bld):
             waflib.Options.commands.append(bld.cmd + '_' + lib32)
 
     # process subfolders from here
-    bld.add_subdirs('common')
+    bld.recurse('common')
 
     if bld.variant:
         # only the wscript in common/ knows how to handle variants
         return
 
     if bld.env['IS_LINUX']:
-        bld.add_subdirs('linux')
-        bld.add_subdirs('example-clients')
-        bld.add_subdirs('tests')
-        bld.add_subdirs('man')
+        bld.recurse('linux')
+        bld.recurse('example-clients')
+        bld.recurse('tests')
+        bld.recurse('man')
         if bld.env['BUILD_JACKDBUS'] == True:
-           bld.add_subdirs('dbus')
+           bld.recurse('dbus')
 
     if bld.env['IS_MACOSX']:
-        bld.add_subdirs('macosx')
-        bld.add_subdirs('example-clients')
-        bld.add_subdirs('tests')
+        bld.recurse('macosx')
+        bld.recurse('example-clients')
+        bld.recurse('tests')
         if bld.env['BUILD_JACKDBUS'] == True:
-            bld.add_subdirs('dbus')
+            bld.recurse('dbus')
 
     if bld.env['IS_SUN']:
-        bld.add_subdirs('solaris')
-        bld.add_subdirs('example-clients')
-        bld.add_subdirs('tests')
+        bld.recurse('solaris')
+        bld.recurse('example-clients')
+        bld.recurse('tests')
         if bld.env['BUILD_JACKDBUS'] == True:
-            bld.add_subdirs('dbus')
+            bld.recurse('dbus')
 
     if bld.env['IS_WINDOWS']:
-        bld.add_subdirs('windows')
-        bld.add_subdirs('example-clients')
-        #bld.add_subdirs('tests')
+        bld.recurse('windows')
+        bld.recurse('example-clients')
+        #bld.recurse('tests')
 
     if bld.env['BUILD_DOXYGEN_DOCS'] == True:
         html_docs_source_dir = "build/default/html"
